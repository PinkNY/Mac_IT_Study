# 명함 지갑을 만드는 회사에서 지갑의 크기를 정하려고 합니다. 다양한 모양과 크기의 명함들을 모두 수납할 수 있으면서, 작아서 들고 다니기 편한 지갑을 만들어야 합니다. 이러한 요건을 만족하는 지갑을 만들기 위해 디자인팀은 모든 명함의 가로 길이와 세로 길이를 조사했습니다.

# 아래 표는 4가지 명함의 가로 길이와 세로 길이를 나타냅니다.

# 명함 번호	가로 길이	세로 길이
# 1	60	50
# 2	30	70
# 3	60	30
# 4	80	40
# 가장 긴 가로 길이와 세로 길이가 각각 80, 70이기 때문에 80(가로) x 70(세로) 크기의 지갑을 만들면 모든 명함들을 수납할 수 있습니다. 하지만 2번 명함을 가로로 눕혀 수납한다면 80(가로) x 50(세로) 크기의 지갑으로 모든 명함들을 수납할 수 있습니다. 이때의 지갑 크기는 4000(=80 x 50)입니다.

# 모든 명함의 가로 길이와 세로 길이를 나타내는 2차원 배열 sizes가 매개변수로 주어집니다. 모든 명함을 수납할 수 있는 가장 작은 지갑을 만들 때, 지갑의 크기를 return 하도록 solution 함수를 완성해주세요.

# 제한사항
# sizes의 길이는 1 이상 10,000 이하입니다.
# sizes의 원소는 [w, h] 형식입니다.
# w는 명함의 가로 길이를 나타냅니다.
# h는 명함의 세로 길이를 나타냅니다.
# w와 h는 1 이상 1,000 이하인 자연수입니다.

def solution(sizes):    
    return max(max(x) for x in sizes) * max(min(x) for x in sizes)

# sizes에서 max, min을 찾고 max * min을 한 값을 리턴.






# 코니는 영어 단어가 적힌 카드 뭉치 두 개를 선물로 받았습니다. 코니는 다음과 같은 규칙으로 카드에 적힌 단어들을 사용해 원하는 순서의 단어 배열을 만들 수 있는지 알고 싶습니다.

# 원하는 카드 뭉치에서 카드를 순서대로 한 장씩 사용합니다.
# 한 번 사용한 카드는 다시 사용할 수 없습니다.
# 카드를 사용하지 않고 다음 카드로 넘어갈 수 없습니다.
# 기존에 주어진 카드 뭉치의 단어 순서는 바꿀 수 없습니다.
# 예를 들어 첫 번째 카드 뭉치에 순서대로 ["i", "drink", "water"], 두 번째 카드 뭉치에 순서대로 ["want", "to"]가 적혀있을 때 ["i", "want", "to", "drink", "water"] 순서의 단어 배열을 만들려고 한다면 첫 번째 카드 뭉치에서 "i"를 사용한 후 두 번째 카드 뭉치에서 "want"와 "to"를 사용하고 첫 번째 카드뭉치에 "drink"와 "water"를 차례대로 사용하면 원하는 순서의 단어 배열을 만들 수 있습니다.

# 문자열로 이루어진 배열 cards1, cards2와 원하는 단어 배열 goal이 매개변수로 주어질 때, cards1과 cards2에 적힌 단어들로 goal를 만들 있다면 "Yes"를, 만들 수 없다면 "No"를 return하는 solution 함수를 완성해주세요.

# 제한사항
# 1 ≤ cards1의 길이, cards2의 길이 ≤ 10
# 1 ≤ cards1[i]의 길이, cards2[i]의 길이 ≤ 10
# cards1과 cards2에는 서로 다른 단어만 존재합니다.
# 2 ≤ goal의 길이 ≤ cards1의 길이 + cards2의 길이
# 1 ≤ goal[i]의 길이 ≤ 10
# goal의 원소는 cards1과 cards2의 원소들로만 이루어져 있습니다.
# cards1, cards2, goal의 문자열들은 모두 알파벳 소문자로만 이루어져 있습니다.

def solution(cards1, cards2, goal):
    
    i, j = 0, 0
    # 각 카드 뭉치에 대한 포인터 초기화
    
    for word in goal:
        if i < len(cards1) and cards1[i] == word:
            # cards1의 현재 위치에 단어가 있는지 확인
            i += 1
        elif j < len(cards2) and cards2[j] == word:
            # cards2의 현재 위치에 단어가 있는지 확인
            j += 1
        else:
            return "No"
            # 현재 단어가 두 카드 뭉치의 현재 위치에 없다면 "No"
        
    return "Yes"
    # 모든 단어를 성공적으로 확인했다면 "Yes"
    
    